import { whisper } from '@oliveai/ldk';
import { IntroWhisper } from '.';

jest.mock('@oliveai/ldk');

const mockWhisperClose = jest.fn();
const mockWhisperUpdate = jest.fn();

describe('Intro Whisper', () => {
  beforeEach(() => {
    whisper.create = jest
      .fn()
      .mockResolvedValueOnce({ close: mockWhisperClose, update: mockWhisperUpdate });
  });
  afterEach(() => {
    jest.resetAllMocks();
  });

  it('creates components as expected', () => {
    const newWhisper = new IntroWhisper();
    const actual = newWhisper.createComponents();

    // Check that we're getting expected component types in the expected order
    const expected = [
      expect.objectContaining({
        type: whisper.WhisperComponentType.Message,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Divider,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.CollapseBox,
        children: [
          expect.objectContaining({ 
            type: whisper.WhisperComponentType.Markdown,
          })
        ],
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Divider,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Markdown,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Box,
        children: [
          expect.objectContaining({
            type: whisper.WhisperComponentType.Button,
          }),
          expect.objectContaining({
            type: whisper.WhisperComponentType.Button,
          }),
        ],
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Divider,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Markdown,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.TextInput,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.TextInput,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Email,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Password,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Telephone,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Button,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Link,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Checkbox,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Checkbox,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.ListPair,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Number,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Select,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.RadioGroup,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Autocomplete,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Autocomplete,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.DateTimeInput,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.DropZone,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Icon,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.SectionTitle,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Breadcrumbs,
        links: [
          expect.objectContaining({
            type: whisper.WhisperComponentType.Link,
          }),
          expect.objectContaining({
            type: whisper.WhisperComponentType.Link,
          }),
          expect.objectContaining({
            type: whisper.WhisperComponentType.Link,
          }),
        ],
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Progress,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Divider,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Markdown,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Message,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.TextInput,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.TextInput,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Button,
      }),
      expect.objectContaining({
        type: whisper.WhisperComponentType.Button,
      }),
    ];

    expect(actual).toEqual(expected);
  });

  it('creates components with functional handlers', async () => {
    const newWhisper = new IntroWhisper();
    newWhisper.show();
    await Promise.resolve();
    const components = newWhisper.createComponents();

    // Check box's first and second button onClicks
    const box = components[5]{{it.isTypeScript ? ' as whisper.Box' : ''}};
    const boxFirstButton = box.children[0]{{it.isTypeScript ? ' as whisper.Button' : ''}};
    const boxSecondButton = box.children[1]{{it.isTypeScript ? ' as whisper.Button' : ''}};
    boxFirstButton.onClick(undefined, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Button 1 clicked.');
    boxSecondButton.onClick(undefined, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Button 2 clicked.');

    // Check textInput's onChange
    const textInput = components[8]{{it.isTypeScript ? ' as whisper.TextInput' : ''}};
    textInput.onChange(undefined, 'test', newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Text changed: ', 'test');

    // Check email's onChange
    const email = components[10]{{it.isTypeScript ? ' as whisper.Email' : ''}};
    email.onChange(undefined, 'test', newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Email changed: ', 'test');

    // Check password's onChange
    const password = components[11]{{it.isTypeScript ? ' as whisper.Password' : ''}};
    password.onChange(undefined, 'test', newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Password changed: ', 'test');

    // Check telephone's onChange
    const telephone = components[12]{{it.isTypeScript ? ' as whisper.Telephone' : ''}};
    telephone.onChange(undefined, 'test', newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Telephone number changed: ', 'test');

    // Check button's onClick
    const button = components[13]{{it.isTypeScript ? ' as whisper.Button' : ''}};
    button.onClick(undefined, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Button clicked.');

    // Check link's onClick
    const link = components[14]{{it.isTypeScript ? ' as whisper.Link' : ''}};
    link.onClick?.(undefined, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Link clicked.');

    // Check checkbox's onChange
    const checkbox = components[15]{{it.isTypeScript ? ' as whisper.Checkbox' : ''}};
    checkbox.onChange(undefined, true, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Checkbox clicked: ', true);

    // Check numberInput's onChange
    const numberInput = components[18]{{it.isTypeScript ? ' as whisper.NumberInput' : ''}};
    numberInput.onChange(undefined, 0, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Number changed: ', 0);

    // Check select's onSelect
    const select = components[19]{{it.isTypeScript ? ' as whisper.Select' : ''}};
    select.onSelect(undefined, 0, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Selected: ', 0);

    // Check radioBtn's onSelect
    const radioBtn = components[20]{{it.isTypeScript ? ' as whisper.RadioGroup' : ''}};
    radioBtn.onSelect(undefined, 0, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Radio button option selected: ', 0);

    // Check updatableMessageInput's onSelect
    const updatableMessageInput = components[32]{{it.isTypeScript ? ' as whisper.TextInput' : ''}};
    updatableMessageInput.onChange(undefined, 'test message', newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Updating message text: ', 'test message');
    expect(mockWhisperUpdate).toBeCalled();
    expect(newWhisper.props.newMessage).toEqual('test message');

    // Check updatableLabelInput's onSelect
    const updatableLabelInput = components[33]{{it.isTypeScript ? ' as whisper.TextInput' : ''}};
    updatableLabelInput.onChange(undefined, 'test label', newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : '' }});
    expect(console.log).toBeCalledWith('Updating whisper label: ', 'test label');
    expect(mockWhisperUpdate).toBeCalled();
    expect(newWhisper.props.label).toEqual('test label');

    // Check autoComplete's onChange
    const autocompleteSingleSelect = components[21]{{it.isTypeScript ? ' as whisper.Autocomplete' : ''}};
    autocompleteSingleSelect.onChange?.(undefined, '4', newWhisper.whisper{{it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Autocomplete section changed: ', '4');

    // Check autocomplete's onSelect
    const autocompleteMultipleSelect = components[22]{{it.isTypeScript ? ' as whisper.Autocomplete' : ''}};
    autocompleteMultipleSelect.onSelect(undefined, ['4', '5'], newWhisper.whisper{{it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Received selected value: ["4","5"]');

    // Check dateTimeInput's onSelect
    const dateTimeInput = components[23]{{it.isTypeScript ? ' as whisper.DateTimeInput' : ''}};
    dateTimeInput.onChange(undefined, '0', newWhisper.whisper{{it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Time picker value received: ', '0');

    // Check icon's onClick
    const icon = components[25]{{it.isTypeScript ? ' as whisper.Icon' : ''}};
    icon.onClick?.(undefined, newWhisper.whisper{{it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Emoji Emotions Clicked');

    // Check clicking on a clone button twice
    const cloneButton = components[35]{{it.isTypeScript ? ' as whisper.Button' : ''}};
    cloneButton.onClick(undefined, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Adding another clone: ', 2);
    expect(mockWhisperUpdate).toBeCalled();
    expect(newWhisper.props.numClones).toEqual(2);
    cloneButton.onClick(undefined, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Adding another clone: ', 3);
    expect(mockWhisperUpdate).toBeCalled();
    expect(newWhisper.props.numClones).toEqual(3);

    // Check clicking on reset clones button
    const resetClonesButton = components[34]{{it.isTypeScript ? ' as whisper.Button' : ''}};
    resetClonesButton.onClick(undefined, newWhisper.whisper{{ it.isTypeScript ? ' as whisper.Whisper' : ''}});
    expect(console.log).toBeCalledWith('Resetting number of clones: ', 1);
    expect(mockWhisperUpdate).toBeCalled();
    expect(newWhisper.props.numClones).toEqual(1);
  });

  it('uses default values for updatable components', async () => {
    const newWhisper = new IntroWhisper();
    newWhisper.show();
    await Promise.resolve();
    newWhisper.update({});

    expect(mockWhisperUpdate).toBeCalledWith({
      label: 'Intro Whisper',
      components: expect.arrayContaining([
        expect.objectContaining({
          type: whisper.WhisperComponentType.Message,
          body: 'Type in the field below to update this line of text',
        }),
        expect.objectContaining({
          type: whisper.WhisperComponentType.Button,
          label: 'Clone Me',
        }),
      ]),
    });
  });

  it('updates as expected for passed in params', async () => {
    const newWhisper = new IntroWhisper();
    newWhisper.show();
    await Promise.resolve();
    newWhisper.update({ newMessage: 'test message', numClones: 3, label: 'test label' });

    expect(mockWhisperUpdate).toBeCalledWith({
      label: 'test label',
      components: expect.arrayContaining([
        expect.objectContaining({
          type: whisper.WhisperComponentType.Message,
          body: 'test message',
        }),
        expect.objectContaining({
          type: whisper.WhisperComponentType.Button,
          label: 'Clone Me',
        }),
        expect.objectContaining({
          type: whisper.WhisperComponentType.Button,
          label: 'Clone Me',
        }),
        expect.objectContaining({
          type: whisper.WhisperComponentType.Button,
          label: 'Clone Me',
        }),
      ]),
    });
  });

  it('creates a whisper and closes it gracefully', async () => {
    const newWhisper = new IntroWhisper();
    newWhisper.show();
    await Promise.resolve();
    newWhisper.close();

    expect(whisper.create).toBeCalledWith(
      expect.objectContaining({
        label: 'Intro Whisper',
        onClose: IntroWhisper.onClose,
      })
    );
    expect(mockWhisperClose).toBeCalled();
  });

  it.each`
    scenario              | error
    ${'without an error'} | ${undefined}
    ${'with an error'}    | ${new Error('error')}
  `('should close properly $scenario', ({ error }) => {
    IntroWhisper.onClose(error);

    if (error) {
      expect(console.error).toBeCalledWith('There was an error closing Intro whisper', error);
    }
    expect(console.log).toBeCalledWith('Intro whisper closed');
  });
});