import { vault } from '@oliveai/ldk';
import { VaultWhisper } from '../../whispers';
import vaultExample from './vaultExample';

jest.mock('@oliveai/ldk');

const mockVaultShow = jest.fn();

jest.mock('../../whispers', () => {
  return {
    VaultWhisper: {
      show: jest.fn(() => mockVaultShow()),
    },
  };
});

describe('Vault aptitude', () => {
  beforeAll(() => {
    jest.useFakeTimers();
    jest.spyOn(global, 'setTimeout');
  });
  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should add tokens to vault', async () => {
    vault.read = jest.fn().mockResolvedValue('{"test": "key"}');

    await vaultExample.run();
    jest.runAllTimers();
    await Promise.resolve();
    await Promise.resolve();

    expect(setTimeout).toHaveBeenCalled();
    expect(console.log).toBeCalledWith(
      'Added createLoopDefaultSettings and settingsExpire to vault'
    );
    expect(console.log).toBeCalledWith(
      'Removed createLoopDefaultSettings and settingsExpire from vault'
    );
    expect(vault.remove).toBeCalledTimes(2);
    expect(vault.read).toBeCalled();
    expect(VaultWhisper.show).toBeCalledWith('{"test": "key"}');
  });

  it('should remove tokens if they currently exist and time has expired', async () => {
    vault.exists = jest.fn().mockResolvedValue(true);
    vault.read = jest.fn().mockResolvedValue(0).mockResolvedValue('{"test": "key"}');

    await vaultExample.run();
    jest.runAllTimers();
    await Promise.resolve();
    await Promise.resolve();

    expect(setTimeout).toHaveBeenCalled();
    expect(vault.remove).toBeCalledTimes(2);
    expect(console.log).toBeCalledWith(
      'Removed createLoopDefaultSettings and settingsExpire from vault'
    );
    expect(VaultWhisper.show).toBeCalledWith('{"test": "key"}');
  });

  it('should call setTimeout if tokens exist and time has not expired', async () => {
    vault.exists = jest.fn().mockResolvedValue(true);
    vault.read = jest.fn().mockResolvedValue(Infinity).mockResolvedValue('{"test": "key"}');

    await vaultExample.run();

    expect(setTimeout).toHaveBeenCalled();
    expect(vault.remove).not.toBeCalled();
    expect(VaultWhisper.show).toBeCalledWith('{"test": "key"}');
  });
});
