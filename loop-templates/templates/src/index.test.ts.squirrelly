{{ @if (it.aptitudes.length > 0) }}
import {
{{ @if (it.aptitudes.includes('clipboard')) }}
  clipboardListener,
{{ /if }}
{{ @if (it.aptitudes.includes('document')) }}
  documentExample,
{{ /if }}
{{ @if (it.aptitudes.includes('filesystem')) }}
  filesystemExample,
{{ /if }}
{{ @if (it.aptitudes.includes('keyboard')) }}
  keyboardListener,
{{ /if }}
{{ @if (it.aptitudes.includes('network')) }}
  networkExample,
{{ /if }}
{{ @if (it.aptitudes.includes('process')) }}
  processExample,
{{ /if }}
{{ @if (it.aptitudes.includes('ui')) }}
  searchListener,
{{ /if }}
{{ @if (it.aptitudes.includes('system')) }}
  systemExample,
{{ /if }}
{{ @if (it.aptitudes.includes('user')) }}
  userExample,
{{ /if }}
{{ @if (it.aptitudes.includes('vault')) }}
  vaultExample,
{{ /if }}
{{ @if (it.aptitudes.includes('window')) }}
  activeWindowListener,
{{ /if }}
  openHandler,
} from './aptitudes';
{{ #else }}
import { openHandler } from './aptitudes';
{{ /if }}

jest.mock('./aptitudes');

describe('Project Startup', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should start the aptitudes and open handler on startup', async () => {
    // eslint-disable-next-line global-require
    await require('.');
    expect(console.log).toBeCalledWith('Example Loop Started');
    expect(openHandler.start).toBeCalled();
{{ @if (it.aptitudes.length > 0) }}
{{ @if (it.aptitudes.includes('clipboard')) }}
    expect(clipboardListener.listen).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('document')) }}
    expect(documentExample.run).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('filesystem')) }}
    expect(filesystemExample.run).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('keyboard')) }}
    expect(keyboardListener.listen).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('network')) }}
    expect(networkExample.run).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('process')) }}
    expect(processExample.run).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('ui')) }}
    expect(searchListener.listen).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('system')) }}
    expect(systemExample.run).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('user')) }}
    expect(userExample.run).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('vault')) }}
    expect(vaultExample.run).toBeCalled();
{{ /if }}
{{ @if (it.aptitudes.includes('window')) }}
    expect(activeWindowListener.listen).toBeCalled();
{{ /if }}
{{ /if }}
  });
});
